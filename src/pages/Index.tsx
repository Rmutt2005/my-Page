import { useState } from "react";
import CuteCat from "@/components/CuteCat";
import ReasonCard from "@/components/ReasonCard";
import HeartButton from "@/components/HeartButton";
import { ChevronLeft, ChevronRight, RotateCcw } from "lucide-react";

const reasons = [
  {
    emoji: "üçü",
    title: "‡πÄ‡∏Ñ‡πâ‡∏≤‡∏û‡∏≤‡πÄ‡∏ò‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!",
    description: "‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≠‡∏¢ ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏û‡∏≤‡πÄ‡∏ò‡∏≠‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏¢‡∏à‡∏π‡πâ!",
  },
  {
    emoji: "üìÖ",
    title: "‡πÄ‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏Å‡∏±‡∏ö‡πÄ‡∏ò‡∏≠",
    description: "‡∏ô‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏î‡∏ó ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Å‡πá‡∏ï‡∏≤‡∏° ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏™‡∏°‡∏≠!",
  },
  {
    emoji: "üéÆ",
    title: "‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ô‡∏•‡∏∑‡∏°‡πÄ‡∏ò‡∏≠",
    description:
      "(‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÄ‡∏ò‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞!) ‡πÅ‡∏•‡∏∞‡∏ñ‡∏∂‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏Å‡πá‡∏à‡∏∞‡πÅ‡∏ä‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏¢‡∏¢",
  },
  {
    emoji: "üõ†Ô∏è",
    title: "‡πÄ‡∏£‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÑ‡∏î‡πâ!!",
    description:
      "‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü‡πÄ‡∏™‡∏µ‡∏¢ ‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏¢‡∏î ‡∏Ñ‡∏≠‡∏°‡∏û‡∏±‡∏á ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î! (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à)",
  },
  {
    emoji: "‚òï",
    title: "‡πÄ‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÑ‡∏î‡πâ!!",
    description:
      "‡πÄ‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏°‡∏±‡πâ‡∏¢‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß!",
  },
];

const Index = () => {
  const [currentStep, setCurrentStep] = useState<
    "question" | "reasons" | "final"
  >("question");
  const [currentReasonIndex, setCurrentReasonIndex] = useState(0);
  const [catMessage, setCatMessage] = useState<string>("");

  const handleStartReasons = (eager: boolean) => {
    setCurrentStep("reasons");
    setCatMessage(
      eager ? "‡πÄ‡∏¢‡πâ! ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏ü‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ô‡∏∞!" : "‡πÄ‡∏≠‡∏≤‡∏•‡∏∞... ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞"
    );
    setTimeout(() => setCatMessage(""), 2000);
  };

  const nextReason = () => {
    if (currentReasonIndex < reasons.length - 1) {
      setCurrentReasonIndex(currentReasonIndex + 1);
    } else {
      setCurrentStep("final");
      setCatMessage("‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á? ‡∏°‡∏µ‡∏™‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡πÉ‡∏à‡∏°‡∏±‡πâ‡∏¢? üòä");
    }
  };

  const prevReason = () => {
    if (currentReasonIndex > 0) {
      setCurrentReasonIndex(currentReasonIndex - 1);
    }
  };

  const resetToStart = () => {
    setCurrentStep("question");
    setCurrentReasonIndex(0);
    setCatMessage("‡∏•‡∏≠‡∏á‡∏à‡∏¥‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡∏î‡∏π‡∏™‡∏¥!!!");
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-4">
      <div className="max-w-2xl mx-auto text-center">
        {/* Cute Cat */}
        <div className="mb-8">
          <CuteCat isWaving={currentStep === "question"} message={catMessage} />
        </div>

        {/* Question Step */}
        {currentStep === "question" && (
          <div className="space-y-8 animate-fade-in">
            <div>
              <h1 className="text-4xl md:text-5xl font-bold text-foreground mb-4 leading-tight">
                ‡πÄ‡∏ò‡∏≠‡πÄ‡∏Ñ‡∏¢‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÑ‡∏´‡∏°
              </h1>
              <h2 className="text-3xl md:text-4xl font-semibold text-primary mb-8">
                ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ü‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡πâ‡∏≤?
              </h2>
            </div>

            <div className="space-y-4">
              <HeartButton
                onClick={() => handleStartReasons(true)}
                variant="primary"
              >
                ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥
              </HeartButton>

              <HeartButton
                onClick={() => handleStartReasons(false)}
                variant="secondary"
              >
                ‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏≠‡∏∞ ‡πÅ‡∏ï‡πà‡∏•‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
              </HeartButton>
            </div>
          </div>
        )}

        {/* Reasons Step */}
        {currentStep === "reasons" && (
          <div className="space-y-8 animate-fade-in items-center">
            <div>
              <h2 className="text-2xl font-bold text-foreground mb-2">
                ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà {currentReasonIndex + 1} ‡∏à‡∏≤‡∏Å {reasons.length}
              </h2>
              <div className="w-full bg-secondary/30 rounded-full h-2 mb-6">
                <div
                  className="bg-primary h-2 rounded-full transition-all duration-500"
                  style={{
                    width: `${
                      ((currentReasonIndex + 1) / reasons.length) * 100
                    }%`,
                  }}
                ></div>
              </div>
            </div>

            <ReasonCard
              {...reasons[currentReasonIndex]}
              isActive={true}
              onClick={() => {}}
            />

            <div className="flex justify-center items-center ">
              <button
                onClick={prevReason}
                disabled={currentReasonIndex === 0}
                className="flex items-center gap-2 px-4 py-2 text-primary disabled:text-muted-foreground disabled:cursor-not-allowed transition-colors"
              >
                <ChevronLeft className="w-5 h-5" />
                ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
              </button>

              <HeartButton
                onClick={() => {
                  nextReason();
                }}
              >
                {currentReasonIndex === reasons.length - 1
                  ? "‡∏ü‡∏±‡∏á‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!"
                  : "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ!"}
              </HeartButton>

              <button
                onClick={resetToStart}
                className="flex items-center gap-2 px-4 py-2 text-muted-foreground hover:text-primary transition-colors"
              >
                <RotateCcw className="w-5 h-5" />
                ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          </div>
        )}

        {/* Final Step */}
        {currentStep === "final" && (
          <div className="space-y-8 animate-fade-in">
            <div>
              <h2 className="text-3xl font-bold text-foreground mb-4">
                ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á?
              </h2>
              <p className="text-xl text-muted-foreground mb-8">
                ‡∏°‡∏µ‡∏™‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡πÉ‡∏à‡∏°‡∏±‡πâ‡∏¢? ü•∫
              </p>
            </div>

            <div className="space-y-4">
              <HeartButton
                onClick={() => setCatMessage("‡πÄ‡∏¢‡πâ‡πÜ‡πÜ! ‡∏Å‡∏î‡πÉ‡∏à‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏°‡∏≤‡∏à‡∏¥ ‡∏≠‡∏¥‡∏≠‡∏¥ üì±")}
                variant="primary"
              >
                ‡πÄ‡∏≠‡∏≠ ‡∏à‡∏£‡∏¥‡∏á‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏î‡∏π‡∏°‡∏±‡πâ‡∏¢‡∏à‡∏π‡πâ?
              </HeartButton>

              <HeartButton
                onClick={() => {
                  setCurrentStep("reasons");
                  setCurrentReasonIndex(0);
                  setCatMessage("‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡∏ô‡∏∞!");
                }}
                variant="secondary"
              >
                ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏ß‡∏£‡πå ‡∏Ç‡∏≠‡∏î‡∏π‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö!
              </HeartButton>
            </div>

            <button
              onClick={resetToStart}
              className="flex items-center gap-2 mx-auto px-4 py-2 text-muted-foreground hover:text-primary transition-colors"
            >
              <RotateCcw className="w-5 h-5" />
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Index;
